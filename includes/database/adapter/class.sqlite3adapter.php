<?php if (!defined('CLYDEPHP'))  { header ('HTTP/1.1 404 Not Found'); exit(1); }

    class Sqlite3Adapter extends SqlAdapter
    {

        // Do we have a valid database connection?
        public function isConnected() {
            return is_object($this->db) && $this->db instanceof SQLite3;
        }

        // Do we have a valid database connection and have we selected a database?
        public function databaseSelected() {
        	if(!$this->isConnected()) return false;
        	$result = $this->query("SELECT name FROM sqlite_master
									WHERE type='table'");
        	return is_object($result) && $result instanceof SQLite3Result;
        }

        public function connect() {				
        	if (is_null($this->getProperty("name")) || $this->getProperty("name") === '') {
        		$this->notifyString("The database name is empty");
        		return false;
        	}
        	
        	try {
        		$this->db = new SQLite3($this->getProperty('name'));
        	} catch (Exception $ex) {
        		$this->notifyString($ex->getMessage());
        	}
        	
        	return $this->isConnected();
        }

        public function query($sql, $args_to_prepare = null, $exception_on_missing_args = true) {
        	if(!$this->isConnected()) $this->connect();
        	
        	// Allow for prepared arguments. Example:
        	// query("SELECT * FROM table WHERE id = :id", array('id' => $some_val));
        	if(is_array($args_to_prepare))
        	{
        		foreach($args_to_prepare as $name => $val)
        		{
        			$val = $this->quote($val);
        			$sql = str_replace(":$name", $val, $sql, $count);
        			if($exception_on_missing_args && (0 == $count))
        				throw new DatabaseException(":$name was not found in prepared SQL query.");
        		}
        	}
        	
        	$this->queries[] = $sql;
        	//fix query string
        	$sql = str_replace("`", "", $sql);
        	
        	$this->result = $this->db->query($sql);
        	if ($this->result === false)
        		$this->notifyString($this->db->lastErrorMsg());
        	return $this->result;
        }

        // Returns the number of rows.
        // You can pass in nothing, a string, or a db result
        public function numRows($arg = null) {
        	throw new DatabaseException("This function is leaved blank intentionally! Don't use it");
        }

        // Returns true / false if the result has one or more rows
        public function hasRows($arg = null) {
        	$result = $this->resulter($arg);        	
        	$result->reset();
        	return (is_array($result->fetchArray()));        	
        }

        // Returns the number of rows affected by the previous operation
        public function affectedRows() {
        	if(!$this->isConnected()) return false;
        	return $this->db->changes();
        }

        // Returns the auto increment ID generated by the previous insert statement
        public function insertId() {
        	if(!$this->isConnected()) return false;
        	$id = $this->db->lastInsertRowID();
        	if($id === 0 || $id === false)
        		return false;
        	else
        		return $id;
        }

        // Returns a single value.
        // You can pass in nothing, a string, or a db result
        public function getValue($arg = null) {
        	throw new DatabaseException("Not yet implemented!");
        }

        // Returns an array of the first value in each row.
        // You can pass in nothing, a string, or a db result
        public function getValues($arg = null) {
        	throw new DatabaseException("Not yet implemented!");
        }

        // Returns the first row.
        // You can pass in nothing, a string, or a db result
        public function getRow($arg = null) {
        	$result = $this->resulter($arg);
        	
        	if(!$this->hasRows($result)) 
        		return false;
        	
        	$result->reset();
        	return $result->fetchArray(SQLITE3_BOTH);
        }

        // Returns an array of all the rows.
        // You can pass in nothing, a string, or a db result
        public function getRows($arg = null) {
        	$result = $this->resulter($arg);
        	
            if(!$this->hasRows($result)) 
            	return false;

            $rows = array();
            $result->reset();
            while($row = $result->fetchArray(SQLITE3_BOTH)) {
                $rows[] = $row;            
            }
            return $rows;
        }       

        // Escapes a value.
        public function escape($var) {
        	if(!$this->isConnected()) $this->connect();
        	return $this->db->escapeString($var);
        }
        
        public function resulter($arg = null) {
        	if(is_null($arg) && is_object($this->result))
        		return $this->result;
        	elseif(is_object($arg) && $arg instanceof SQLite3Result)
        		return $arg;
        	elseif(is_string($arg)) {
        		$this->query($arg);
        		if(is_object($this->result))
        			return $this->result;
        		else
        			return false;
        	}
        	else
        		return false;
        }
        
        private function notifyString($msg) {
        	error_log($msg);
        	throw new DatabaseException($msg);
        }

        public function getDatabaseType() {
        	return Database::TYPE_SQL;
        }

        public function getAdapterName() {
        	return "sqlite3";
        }

    }
