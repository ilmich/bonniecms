<?php if (!defined('CLYDEPHP'))  { header ('HTTP/1.1 404 Not Found'); exit(1); }

	if (!function_exists('sqlite_open'))
		throw new ClydePhpException('Sqlite2 extension is missing!');

    class SqliteAdapter extends SqlAdapter
    {

        // Do we have a valid database connection?
        public function isConnected() {
            return is_resource($this->db) && get_resource_type($this->db) == 'sqlite link';
        }

        // Do we have a valid database connection and have we selected a database?
        public function databaseSelected() {
            if(!$this->isConnected()) return false;
            $result = $this->query("SELECT name FROM sqlite_master
									WHERE type='table'");
            return is_resource($result);
        }

        public function connect() {				
            if (is_null($this->getProperty("name")) || $this->getProperty("name") === '') {
				$this->notifyString("The database name is empty");
				return false;
			}		
						
			$this->db = @sqlite_open($this->getProperty("name"),0666,$sqlite_error);			
            if($this->db === false) {
				$this->notifyString($sqlite_error);			
				return false;        			
			}
            return $this->isConnected();
        }

        public function query($sql, $args_to_prepare = null, $exception_on_missing_args = true) {
        	if(!$this->isConnected()) $this->connect();
        		
        	// Allow for prepared arguments. Example:
        	// query("SELECT * FROM table WHERE id = :id", array('id' => $some_val));
        	if(is_array($args_to_prepare))
            {
                foreach($args_to_prepare as $name => $val)
                {
                    $val = $this->quote($val);
                    $sql = str_replace(":$name", $val, $sql, $count);				
                    if($exception_on_missing_args && (0 == $count))
                        throw new DatabaseException(":$name was not found in prepared SQL query.");
                }
            }

            $this->queries[] = $sql;
			//fix query string
			$sql = str_replace("`", "", $sql);
						
            $this->result = @sqlite_query($sql, $this->db,null,$sqlite_error); 
            if ($this->result === false)
               $this->notifyString($sqlite_error);
            return $this->result;
        }

        // Returns the number of rows.
        // You can pass in nothing, a string, or a db result
        public function numRows($arg = null) {
            $result = $this->resulter($arg);
            return ($result !== false) ? sqlite_num_rows($result) : false;
        }

        // Returns true / false if the result has one or more rows
        public function hasRows($arg = null) {
            $result = $this->resulter($arg);
            return is_resource($result) && (sqlite_num_rows($result) > 0);
        }

        // Returns the number of rows affected by the previous operation
        public function affectedRows() {
            if(!$this->isConnected()) return false;
            return sqlite_changes($this->db);
        }

        // Returns the auto increment ID generated by the previous insert statement
        public function insertId() {
            if(!$this->isConnected()) return false;
            $id = sqlite_last_insert_rowid($this->db);
            if($id === 0 || $id === false)
                return false;
            else
                return $id;
        }

        // Returns a single value.
        // You can pass in nothing, a string, or a db result
        public function getValue($arg = null) {
            $result = $this->resulter($arg);
            if ($this->hasRows($result)) {
					sqlite_rewind($result);
					$row = sqlite_fetch_array($result, SQLITE_NUM);
					return $row[0];
			}
			return false;
        }

        // Returns an array of the first value in each row.
        // You can pass in nothing, a string, or a db result
        public function getValues($arg = null) {
            $result = $this->resulter($arg);
            if(!$this->hasRows($result)) return array();

            $values = array();
            sqlite_rewind($result, 0);
            while($row = sqlite_fetch_array($result, SQLITE_ASSOC))
                $values[] = array_shift($row);
            return $values;
        }

        // Returns the first row.
        // You can pass in nothing, a string, or a db result
        public function getRow($arg = null) {
            $result = $this->resulter($arg);
            return $this->hasRows($result) ? sqlite_fetch_array($result, SQLITE_ASSOC) : false;
        }

        // Returns an array of all the rows.
        // You can pass in nothing, a string, or a db result
        public function getRows($arg = null) {
            $result = $this->resulter($arg);
            if(!$this->hasRows($result)) return array();

            $rows = array();
            sqlite_rewind($result);
            while($row = sqlite_fetch_array($result, SQLITE_ASSOC))
                $rows[] = $row;
            return $rows;
        }       

        // Escapes a value.
        public function escape($var) {
        	if(!$this->isConnected()) $this->connect();
        	return sqlite_escape_string($var);
        }
        
        private function notifyString($msg) {
        	error_log($msg);
        	throw new DatabaseException($msg);
        }

        public function getDatabaseType() {
        	return Database::TYPE_SQL;
        }

        public function getAdapterName() {
        	return "sqlite";
        }

    }
